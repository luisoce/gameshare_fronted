{"version":3,"file":"minifyObject.production.js","sources":["../../src/isArrayValue.ts","../../src/isNumeric.ts","../../src/lengthEquals.ts","../../src/numberEquals.ts","../../src/isNullish.ts","../../src/isNull.ts","../../src/isUndefined.ts","../../src/valueIsObject.ts","../../src/isEmpty.ts","../../src/hasOwnProperty.ts","../../src/exports/minifyObject.ts","../../src/isFunction.ts","../../src/isStringValue.ts"],"sourcesContent":["import bindNot from 'bindNot';\n\n// The module is named \"isArrayValue\" since it\n// is conflicting with a nested npm dependency.\n// We may need to revisit this in the future.\n\nexport function isArray(value: unknown): value is Array<unknown> {\n  return Boolean(Array.isArray(value));\n}\n\nexport const isNotArray = bindNot(isArray);\n","import bindNot from 'bindNot';\n\nexport function isNumeric(value: string | number): boolean {\n  const str = String(value);\n  const num = Number(value);\n  const result =\n    !isNaN(parseFloat(str)) && !isNaN(Number(value)) && isFinite(num);\n  return Boolean(result);\n}\n\nexport const isNotNumeric = bindNot(isNumeric);\n","import bindNot from 'bindNot';\nimport { numberEquals } from 'numberEquals';\n\nexport function lengthEquals(\n  value: string | unknown[],\n  arg1: string | number\n): boolean {\n  return numberEquals(value.length, arg1);\n}\n\nexport const lengthNotEquals = bindNot(lengthEquals);\n","import bindNot from 'bindNot';\nimport { isNumeric } from 'isNumeric';\n\nexport function numberEquals(\n  value: string | number,\n  eq: string | number\n): boolean {\n  return isNumeric(value) && isNumeric(eq) && Number(value) === Number(eq);\n}\n\nexport const numberNotEquals = bindNot(numberEquals);\n","import bindNot from 'bindNot';\nimport { isNull } from 'isNull';\nimport { isUndefined } from 'isUndefined';\nimport { Nullish } from 'utilityTypes';\n\nexport function isNullish(value: any): value is Nullish {\n  return isNull(value) || isUndefined(value);\n}\n\nexport const isNotNullish = bindNot(isNullish);\n","import bindNot from 'bindNot';\n\nexport function isNull(value: unknown): value is null {\n  return value === null;\n}\n\nexport const isNotNull = bindNot(isNull);\n","import bindNot from 'bindNot';\n\nexport function isUndefined(value?: unknown): value is undefined {\n  return value === undefined;\n}\n\nexport const isNotUndefined = bindNot(isUndefined);\n","import { isNullish } from 'isNullish';\n\nexport function isObject(v: any): v is Record<any, any> {\n  return typeof v === 'object' && !isNullish(v);\n}\n","import bindNot from 'bindNot';\nimport hasOwnProperty from 'hasOwnProperty';\nimport { lengthEquals } from 'lengthEquals';\nimport { isObject } from 'valueIsObject';\n\nexport function isEmpty(value: unknown): boolean {\n  if (!value) {\n    return true;\n  } else if (hasOwnProperty(value, 'length')) {\n    return lengthEquals(value as string | unknown[], 0);\n  } else if (isObject(value)) {\n    return lengthEquals(Object.keys(value as Record<string, unknown>), 0);\n  }\n\n  return false;\n}\n\nexport const isNotEmpty = bindNot(isEmpty);\n","/**\n * A safe hasOwnProperty access\n */\nexport default function hasOwnProperty<T>(\n  obj: T,\n  key: string | number | symbol\n): key is keyof T {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n","import { isArray } from 'isArrayValue';\nimport { isEmpty } from 'isEmpty';\nimport isFunction from 'isFunction';\nimport { isNullish } from 'isNullish';\nimport isStringValue from 'isStringValue';\nimport { isObject } from 'valueIsObject';\n\n// Basic key generator that generates keys like a, b, c, ... aa, ab, ac, ...\nfunction genMinifiedKey() {\n  const chars =\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*';\n  let index = 0;\n\n  return function next(): string {\n    let code = '';\n    let x = index;\n\n    do {\n      code = code + chars[x % chars.length];\n      x = Math.floor(x / chars.length);\n    } while (x > 0);\n    index++;\n    return code;\n  };\n}\n\nexport function minifyObject(\n  obj: any,\n  excludeKeys: Set<string> = new Set(),\n): [any, any] {\n  const countMap = new Map<any, number>();\n  countOccurrences(obj, countMap, excludeKeys);\n  const maps = genMap(countMap);\n  const o = minifyObjectImpl(obj, maps.map, excludeKeys);\n  // need to reverse the map so that the minified keys are the keys and the original keys are the values\n  // and turn it into an object\n\n  return [o, maps.reverseMap];\n}\n\nfunction genMap(countMap: Map<any, number>) {\n  const counts = [];\n\n  for (const [value, count] of countMap) {\n    if (count > 1) {\n      counts.push({ value, count });\n    }\n  }\n\n  const sorted = counts.sort((a, z) => z.count - a.count);\n\n  const getKey = genMinifiedKey();\n  return sorted.reduce(\n    (maps, { value }) => {\n      if (!shouldAddToMap(value, maps.keyLength)) {\n        return maps;\n      }\n\n      let key;\n      do {\n        key = getKey();\n      } while (countMap.has(key));\n      maps.map.set(value, key);\n      maps.reverseMap[key] = value;\n      maps.keyLength = key.length;\n      return maps;\n    },\n    {\n      map: new Map(),\n      reverseMap: {},\n      keyLength: 1,\n    } as {\n      map: Map<any, string>;\n      reverseMap: Record<string, any>;\n      keyLength: number;\n    },\n  );\n}\n\n// This avoids minification if the original key is shorter than or equals the minified key\nfunction shouldAddToMap(value: any, keyLength: number) {\n  return value.toString().length >= keyLength;\n}\n\nfunction addCount(value: any, countMap: Map<any, number>) {\n  countMap.set(value, (countMap.get(value) || 0) + 1);\n}\n\n// eslint-disable-next-line complexity\nfunction countOccurrences(\n  obj: any,\n  countMap: Map<any, number>,\n  excludeKeys: Set<string>,\n) {\n  for (const key in obj) {\n    const value = obj[key];\n    if (!shouldMinify({ key, value }, excludeKeys)) continue;\n\n    if (!Array.isArray(obj)) {\n      addCount(key, countMap);\n    }\n\n    if (isObject(value)) {\n      countOccurrences(value, countMap, excludeKeys);\n    } else {\n      addCount(value, countMap);\n    }\n  }\n}\n\nfunction isNonSerializable(value: any): boolean {\n  return isNullish(value) || isFunction(value) || typeof value === 'symbol';\n}\n\n// eslint-disable-next-line complexity\nfunction shouldMinify(\n  { key, value }: { key?: string; value?: any },\n  excludeKeys: Set<string>,\n): boolean {\n  if (key && excludeKeys.has(key)) {\n    return false;\n  }\n\n  if (isObject(value) && isEmpty(value)) {\n    return false;\n  }\n\n  if (isNonSerializable(value)) {\n    return false;\n  }\n\n  if (isObject(value) && isEmpty(value)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction minifyObjectImpl(\n  obj: any,\n  map: Map<any, string>,\n  excludeKeys: Set<string>,\n): any {\n  const minifiedObject: any = getRootNode(obj);\n\n  for (const key in obj) {\n    const value = obj[key];\n    if (!shouldMinify({ key, value }, excludeKeys)) continue;\n\n    let minifiedValue;\n    if (isObject(value)) {\n      minifiedValue = minifyObjectImpl(value, map, excludeKeys);\n    } else {\n      minifiedValue = minifyValue(value, map);\n    }\n\n    setValue(minifiedObject, minifiedValue, minifyValue(key, map));\n  }\n\n  return minifiedObject;\n}\n\nfunction minifyValue(value: any, map: Map<any, string>) {\n  return map.get(value) ?? value;\n}\n\nfunction expandSingle(value: any, map: Record<string, any>): any {\n  if (isStringValue(value)) {\n    return map[value] ?? value;\n  }\n\n  return value;\n}\n\nexport function expandObject(minifiedObj: any, map: Record<string, any>): any {\n  const expandedObject: any = getRootNode(minifiedObj);\n\n  for (const key in minifiedObj) {\n    let expandedValue;\n    const value = minifiedObj[key];\n    if (isObject(value)) {\n      expandedValue = expandObject(value, map);\n    } else {\n      expandedValue = expandSingle(value, map);\n    }\n\n    const expandedKey = expandSingle(key, map);\n    setValue(expandedObject, expandedValue, expandedKey);\n  }\n\n  return expandedObject;\n}\n\nfunction setValue(container: any, value: any, key: string) {\n  if (isArray(container)) {\n    container.push(value);\n  } else {\n    container[key] = value;\n  }\n}\n\nfunction getRootNode(node: any) {\n  return isArray(node) ? [] : {};\n}\n","export default function isFunction(\n  value: unknown\n): value is (...args: unknown[]) => unknown {\n  return typeof value === 'function';\n}\n","export default function isStringValue(v: unknown): v is string {\n  return String(v) === v;\n}\n"],"names":["isArray","value","Boolean","Array","isNumeric","str","String","num","Number","result","isNaN","parseFloat","isFinite","lengthEquals","arg1","eq","numberEquals","length","isNullish","isNull","undefined","isUndefined","isObject","v","isEmpty","obj","key","Object","prototype","hasOwnProperty","call","keys","minifyObject","excludeKeys","Set","countMap","Map","countOccurrences","maps","counts","count","push","sorted","sort","a","z","getKey","chars","index","code","x","Math","floor","genMinifiedKey","reduce","keyLength","toString","shouldAddToMap","has","map","set","reverseMap","genMap","minifyObjectImpl","addCount","get","shouldMinify","isFunction","isNonSerializable","minifiedObject","getRootNode","minifiedValue","minifyValue","setValue","_a","expandSingle","expandObject","minifiedObj","expandedObject","expandedValue","container","node"],"mappings":"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"}