{"version":3,"file":"context.production.js","sources":["../../src/context.ts"],"sourcesContent":["import type { CB, Maybe } from 'vest-utils';\nimport {\n  assign,\n  defaultTo,\n  invariant,\n  optionalFunctionValue,\n  Nullable,\n} from 'vest-utils';\n\nconst USEX_DEFAULT_ERROR_MESSAGE = 'Not inside of a running context.';\nconst EMPTY_CONTEXT = Symbol();\n\n/**\n * Base context interface.\n */\nexport function createContext<T>(defaultContextValue?: T): CtxApi<T> {\n  let contextValue: T | symbol = EMPTY_CONTEXT;\n\n  return {\n    run,\n    use,\n    useX,\n  };\n\n  function use(): T {\n    return (isInsideContext() ? contextValue : defaultContextValue) as T;\n  }\n\n  function useX(errorMessage?: string): T {\n    invariant(\n      isInsideContext(),\n      defaultTo(errorMessage, USEX_DEFAULT_ERROR_MESSAGE)\n    );\n    return contextValue as T;\n  }\n\n  function run<R>(value: T, cb: () => R): R {\n    const parentContext = isInsideContext() ? use() : EMPTY_CONTEXT;\n\n    contextValue = value;\n\n    const res = cb();\n\n    contextValue = parentContext;\n    return res;\n  }\n\n  function isInsideContext(): boolean {\n    return contextValue !== EMPTY_CONTEXT;\n  }\n}\n\n/**\n * Cascading context - another implementation of context, that assumes the context value is an object.\n * When nesting context runs, the the values of the current layer merges with the layers above it.\n */\nexport function createCascade<T extends Record<string, unknown>>(\n  init?: (value: Partial<T>, parentContext: Maybe<T>) => Nullable<T>\n): CtxCascadeApi<T> {\n  const ctx = createContext<T>();\n\n  return {\n    bind,\n    run,\n    use: ctx.use,\n    useX: ctx.useX,\n  };\n\n  function run<R>(value: Partial<T>, fn: () => R): R {\n    const parentContext = ctx.use();\n\n    const out = assign(\n      {},\n      parentContext ? parentContext : {},\n      optionalFunctionValue(init, value, parentContext) ?? value\n    ) as T;\n\n    return ctx.run(Object.freeze(out), fn) as R;\n  }\n\n  function bind<Fn extends CB>(value: Partial<T>, fn: Fn) {\n    return function (...runTimeArgs: Parameters<Fn>) {\n      return run<ReturnType<Fn>>(value, function () {\n        return fn(...runTimeArgs);\n      });\n    } as Fn;\n  }\n}\n\ntype ContextConsumptionApi<T> = {\n  use: () => T;\n  useX: (errorMessage?: string) => T;\n};\n\nexport type CtxApi<T> = ContextConsumptionApi<T> & {\n  run: <R>(value: T, cb: () => R) => R;\n};\n\nexport type CtxCascadeApi<T> = ContextConsumptionApi<T> & {\n  run: <R>(value: Partial<T>, fn: () => R) => R;\n  bind: <Fn extends CB>(value: Partial<T>, fn: Fn) => Fn;\n};\n"],"names":["EMPTY_CONTEXT","Symbol","createContext","defaultContextValue","contextValue","run","value","cb","parentContext","isInsideContext","use","res","useX","errorMessage","invariant","defaultTo","createCascade","init","ctx","bind","fn","runTimeArgs","out","assign","_a","optionalFunctionValue","Object","freeze"],"mappings":"6FASA,MACMA,EAAgBC,SAKhB,SAAUC,EAAiBC,GAC/B,IAAIC,EAA2BJ,EAE/B,MAAO,CACLK,IAiBF,SAAgBC,EAAUC,GACxB,MAAMC,EAAgBC,IAAoBC,IAAQV,EAElDI,EAAeE,EAEf,MAAMK,EAAMJ,IAGZ,OADAH,EAAeI,EACRG,CACR,EAzBCD,MACAE,KAOF,SAAcC,GAKZ,OAJAC,EACEL,IACAM,EAAUF,EAtBmB,qCAwBxBT,CACR,GAVD,SAASM,IACP,OAAQD,IAAoBL,EAAeD,CAC5C,CAqBD,SAASM,IACP,OAAOL,IAAiBJ,CACzB,CACH,CAMM,SAAUgB,EACdC,GAEA,MAAMC,EAAMhB,IAEZ,MAAO,CACLiB,KAkBF,SAA6Bb,EAAmBc,GAC9C,OAAO,YAAaC,GAClB,OAAOhB,EAAoBC,GAAO,WAChC,OAAOc,KAAMC,EACf,GACF,CACD,EAvBChB,MACAK,IAAKQ,EAAIR,IACTE,KAAMM,EAAIN,MAGZ,SAASP,EAAOC,EAAmBc,SACjC,MAAMZ,EAAgBU,EAAIR,MAEpBY,EAAMC,EACV,GACAf,GAAgC,CAAE,EACe,QAAjDgB,EAAAC,EAAsBR,EAAMX,EAAOE,UAAc,IAAAgB,EAAAA,EAAIlB,GAGvD,OAAOY,EAAIb,IAAIqB,OAAOC,OAAOL,GAAMF,EACpC,CASH"}